<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="IAM Default"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>PMD (v5.0.5) Default Ruleset</description>

    <!-- ################################################################# -->
    <!-- ######################## JAVA RULES ############################# -->
    <!-- ################################################################# -->

    <rule ref="rulesets/java/basic.xml">
        <exclude name="EmptyCatchBlock"/>
    </rule>
    <rule ref="rulesets/java/basic.xml/EmptyCatchBlock">
        <properties>
            <property name="allowCommentedBlocks" value="true"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/braces.xml"/>

    <rule ref="rulesets/java/clone.xml"/>

    <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount"/>
    <rule ref="rulesets/java/codesize.xml/TooManyFields"/>

    <rule ref="rulesets/java/comments.xml/CommentSize">
        <properties>
            <property name="maxLineLength" value="120"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/>
    <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape"/>
    <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/>
    <rule ref="rulesets/java/controversial.xml/UnnecessaryParentheses"/>
    <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType"/>
    <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
    <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>

    <rule ref="rulesets/java/coupling.xml/CouplingBetweenObjects">
        <properties>
            <property name="threshold" value="20"/>
        </properties>
    </rule>
    <rule ref="rulesets/java/coupling.xml/LooseCoupling"/>

    <rule ref="rulesets/java/design.xml">
        <exclude name="UncommentedEmptyConstructor"/>
    </rule>

    <rule ref="rulesets/java/empty.xml"/>

    <rule ref="rulesets/java/finalizers.xml"/>

    <rule ref="rulesets/java/imports.xml/TooManyStaticImports"/>

    <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>

    <rule ref="rulesets/java/javabeans.xml"/>

    <rule ref="rulesets/java/logging-java.xml"/>

    <rule ref="rulesets/java/naming.xml/ShortVariable">
        <properties>
            <property name="xpath">
                <value>
                    //VariableDeclaratorId[(string-length(@Image) &lt; 3) and (not (@Image='id')) and (not (@Image='ID')) and (not (@Image='sb')) and (not (@Image='is'))]
                    [not(ancestor::ForInit)]
                    [not((ancestor::FormalParameter) and (ancestor::TryStatement))]
                </value>
            </property>
        </properties>
    </rule>
    <rule ref="rulesets/java/naming.xml/LongVariable">
        <properties>
            <property name="minimum" value="32"/>
        </properties>
    </rule>
    <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
    <rule ref="rulesets/java/naming.xml/GenericsNaming"/>

    <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops"/>
    <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
    <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
    <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
    <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
    <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/>

    <rule ref="rulesets/java/strictexception.xml">
        <exclude name="AvoidCatchingThrowable"/>
        <exclude name="AvoidCatchingGenericException"/>
    </rule>

    <rule ref="rulesets/java/strings.xml">
        <exclude name="AvoidDuplicateLiterals"/>
    </rule>
    <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
        <properties>
            <property name="maxDuplicateLiterals" value="3"/>
            <property name="skipAnnotations" value="true"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/sunsecure.xml"/>

    <rule ref="rulesets/java/typeresolution.xml"/>

    <rule ref="rulesets/java/unnecessary.xml"/>

    <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>

    <!-- ################################################################# -->
    <!-- ##################### ECMASCRIPT RULES ########################## -->
    <!-- ################################################################# -->

    <rule ref="rulesets/ecmascript/basic.xml"/>

    <rule ref="rulesets/ecmascript/braces.xml"/>

    <rule ref="rulesets/ecmascript/unnecessary.xml"/>

    <!-- ################################################################# -->
    <!-- ######################### JSP RULES ############################# -->
    <!-- ################################################################# -->

    <rule ref="rulesets/jsp/basic.xml"/>

    <!-- ################################################################# -->
    <!-- ######################### XML RULES ############################# -->
    <!-- ################################################################# -->

    <rule ref="rulesets/xml/basic.xml"/>

</ruleset>
